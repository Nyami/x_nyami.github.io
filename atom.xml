<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nyami's Blog]]></title>
  <link href="http://www.nyami.uk/atom.xml" rel="self"/>
  <link href="http://www.nyami.uk/"/>
  <updated>2017-11-30T22:07:12+00:00</updated>
  <id>http://www.nyami.uk/</id>
  <author>
    <name><![CDATA[Douglas Cameron]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Self-Signed Certificate for Identity Provider]]></title>
    <link href="http://www.nyami.uk/blog/2017/11/18/creating-a-self-signed-certificate-for-identity-provider/"/>
    <updated>2017-11-18T09:54:16+00:00</updated>
    <id>http://www.nyami.uk/blog/2017/11/18/creating-a-self-signed-certificate-for-identity-provider</id>
    <content type="html"><![CDATA[<p>I’d recently had to create a self-signed certificate for use in IdentityProvider4 and was coming up against problems when using the default options with New-SelfSignedCertificate PS module.</p>

<p>Identity Server was throwing &ldquo;CryptographicException: Invalid provider type specified&rdquo; and I had ensured the user account had access so it should have been all good. After a little bit of digging it turned out the private keys were not accessible from .NET. David Christiansen’s <a href="http://blog.davidchristiansen.com/2016/05/521/">blog post</a> helped me track down the issue but with a little more research I ended up with the following PowerShell to create a working certificate avoiding additional steps I didnt understand ;).</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$idSrvCertificate = New-SelfSignedCertificate `
</span><span class='line'>    -Subject "CN=MyIdentityProviderCert" `
</span><span class='line'>    -FriendlyName "Identity Server Token Signing" `
</span><span class='line'>    -CertStoreLocation "cert:LocalMachine\My" `
</span><span class='line'>    -KeyAlgorithm RSA `
</span><span class='line'>    -KeySpec Signature `
</span><span class='line'>    -KeyLength 2048 `
</span><span class='line'>    -KeyUsage DigitalSignature, KeyEncipherment, DataEncipherment, CertSign `
</span><span class='line'>    -NotBefore (Get-Date) `
</span><span class='line'>    -NotAfter (Get-Date).AddYears(5);
</span><span class='line'>
</span><span class='line'>$username = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name;
</span><span class='line'>
</span><span class='line'>$keyname = (((Get-ChildItem cert:\LocalMachine\my | Where-Object {$_.thumbprint -like $idSrvCertificate.ThumbPrint}).PrivateKey).CspKeyContainerInfo).UniqueKeyContainerName;
</span><span class='line'>
</span><span class='line'>$keypath = $env:ProgramData + "\Microsoft\Crypto\RSA\MachineKeys\";
</span><span class='line'>$fullpath = $keypath + $keyname;
</span><span class='line'>icacls $fullpath /grant $username`:RX;</span></code></pre></td></tr></table></div></figure>


<p> In addition to creating the certificate it will also ensure the current user has read access to the private keys avoiding the need to run VS elevated when developing, this last part could obviously be extracted and reused for your application pool if running Identity Server in IIS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash - I Forgot Sudo]]></title>
    <link href="http://www.nyami.uk/blog/2016/10/06/bash-i-forgot-sudo/"/>
    <updated>2016-10-06T08:16:59+00:00</updated>
    <id>http://www.nyami.uk/blog/2016/10/06/bash-i-forgot-sudo</id>
    <content type="html"><![CDATA[<p>If you’re new to running Bash on Windows like me chances are you’ll type some huge long command only to be presented with a nice message telling you that permission was denied and then you realise you forgot “sudo”. Rather than typing the whole thing again prefixing with sudo this handy alias will save you a few keystrokes:</p>

<ul>
<li>Edit bashrc (vi .bashrc)</li>
<li>Add the alias “ffs=&lsquo;sudo $(history -p !!)&#8217;”</li>
<li>Restart/open bash console</li>
</ul>


<p>And in case you struggle with vi here is a handy <a href="http://www.lagmonster.org/docs/vi.html">cheat sheet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RadButton Single Click]]></title>
    <link href="http://www.nyami.uk/blog/2016/07/13/radbutton-single-click/"/>
    <updated>2016-07-13T20:55:47+00:00</updated>
    <id>http://www.nyami.uk/blog/2016/07/13/radbutton-single-click</id>
    <content type="html"><![CDATA[<p>A great and easy way to avoid the double-bounce issue and prevent getting duplicate entries etc is to use the <a href="http://demos.telerik.com/aspnet-ajax/button/examples/singleclick/defaultcs.aspx">SingleClick</a> property of the RadButton.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;telerik:RadButton runat="server" ID="btnSend" Text="Send" OnClick="btnSend_Click" SingleClick="true" SingleClickText="Sending...">
</span><span class='line'>&lt;/telerik:RadButton></span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve no idea how I&rsquo;ve not encountered this RadButton setting before now, saves wiring up custom OnClientClick events&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Blog Is Reborn]]></title>
    <link href="http://www.nyami.uk/blog/2016/07/09/a-blog-is-reborn/"/>
    <updated>2016-07-09T20:08:33+00:00</updated>
    <id>http://www.nyami.uk/blog/2016/07/09/a-blog-is-reborn</id>
    <content type="html"><![CDATA[<p>Ok, I started off with the best intention of blogging more regularly but 18 months between blog posts was not quite the cadence I was aiming for! Shortly after setting up the blog I rebuild my machine and completely failed in setting up Octopress, following my own steps in [&ldquo;A Blog Is Born&rdquo;] just wasn’t working, I was encountering more problems than I knew how to fix I think because most of the tools weren’t playing nicely with each other on Windows so I gave up in a huff until an easy solution came along.</p>

<!--more-->


<h2>Bash on Windows</h2>

<p>This year at Build Microsoft announced the ability to run native Bash on Ubuntu on Windows! Apart the obvious advantages of being able to use cmatrix or cowsay I was at first a little indifferent about the announcement until I realised that this might actually mean I could get Octopress working on Windows, so if all goes to plan this will be my fool proof guide to setting up Octopress using Bash in Windows 10.</p>

<h3>Installing Bash</h3>

<p>In order to run Bash on Windows you’ll need to be running the Windows 10 Anniversary Update (currently available to Insiders) and then you will need to:
* Turn-on Developer Mode
* Enable the &ldquo;Windows Subsystem for Linux (beta)&rdquo; feature</p>

<p>And that’s it, for more information and a more in-depth guide check out <a href="https://msdn.microsoft.com/en-us/commandline/wsl/about">https://msdn.microsoft.com/en-us/commandline/wsl/about</a></p>

<h3>Install the basics</h3>

<p>Once you are up and running with bash you’ll need to install the basic tools using apt-get, here’s the list that I used to get started:</p>

<ul>
<li>make</li>
<li>rake</li>
<li>nodejs</li>
<li>git</li>
<li>ruby1.9.1-dev</li>
<li>bundler</li>
</ul>


<p>I then pulled down everything from Github and picked up the usual Octopress workflow, and if all goes to plan this should be live within the hour.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TFVC and NuGet Updates]]></title>
    <link href="http://www.nyami.uk/blog/2015/01/07/tfvc-and-nuget-updates/"/>
    <updated>2015-01-07T12:00:04+00:00</updated>
    <id>http://www.nyami.uk/blog/2015/01/07/tfvc-and-nuget-updates</id>
    <content type="html"><![CDATA[<p>At some point, for no obvious reason, I kept encountering an error when updating some NuGet packages, the error (TF14092) was basically telling me a file could not be modified as there was a pending delete. Experience has taught me that there is generally a reason for sudden changes in behaviour and after a little analysis I eventually worked it out.</p>

<!--more-->


<p>We currently use TFS2013 for version control, our main solution uses Visual Studio 2013 and we rely on a number of packages from <a href="http://www.nuget.org/">NuGet</a> as well as an internal repository for internal or licensed 3rd libraries. Historically this has not always been the case, we&rsquo;ve upgraded the solution through various versions of Visual Studio and TFS has also been upgraded from TFS2010, but the occurrence of this problem didn&rsquo;t appear to tie in with either upgrade. What I eventually worked out was that I had been using a server workspace long after the primary project had been upgraded, it wasn&rsquo;t until I was free of some of our older projects that I upgraded to a <a href="http://msdn.microsoft.com/en-us/library/bb892960.aspx">local workspace</a> that had actually introduced this behaviour.</p>

<p>Once I realised the root cause the solution was simple, I created a new workspace on my PC but ensured it was a server workspace, opened the solution from this workspace and upgraded my NuGet packages, I could have alternatively changed the existing workspace from local to server but I think local workspaces work better for me.</p>

<p>For future reference the full error is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 error(s) encountered attempting to perform the add operation on 1 item(s) First error encountered:
</span><span class='line'>TF14092: The item $/SOMEITEM cannot be changed. A parent of this item has a pending delete which must be checked in first.
</span><span class='line'>See output tool window for information on any other errors.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Blog Is Born]]></title>
    <link href="http://www.nyami.uk/blog/2014/12/14/a-blog-is-born/"/>
    <updated>2014-12-14T11:23:47+00:00</updated>
    <id>http://www.nyami.uk/blog/2014/12/14/a-blog-is-born</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve decided to start a blog, not for the first time, I&rsquo;ve had a few attempts on a couple of different platforms from a custom web app to <a href="http://umbraco.com/">Umbraco</a> and I&rsquo;ve probably got stuff on Geeks with Blogs and Blogger too. This time I&rsquo;m going for an Octopress and GitHub Pages combo and I know little of either! Thankfully both are fairly well documented and hopefully be able to learn a few things along the way.</p>

<!--more-->


<p>This first post will hopefully detail how to get started, <strong>[SPOILER ALERT]</strong> I guess if you are reading this then this has proven to be successful. I&rsquo;m using my trusty Surface Pro running Windows 10 Tech Preview so a good starting point looks to be <a href="http://thaiat.github.io/blog/2014/03/13/how-to-install-and-use-octopress-on-windows/">How to Install and Use Octopress on Windows</a> so let&rsquo;s see how this goes.</p>

<h2>1. Getting the basics installed</h2>

<p>To get started we&rsquo;ll need a couple of things installed and <a href="https://chocolatey.org">Chocolatey</a> is the best place to start this process! Once installed (or updated in my case) the following packages should be installed:</p>

<ul>
<li><code>choco install git</code></li>
<li><code>choco install ruby -version 1.9.3.54500</code></li>
<li><code>choco install ruby.devkit</code></li>
<li><code>choco install python</code></li>
</ul>


<h2>2. Install Octopress</h2>

<p>Once everything is installed and the command prompt is restarted lets get Octopress installed, configured and deployed.</p>

<ul>
<li><code>git init</code></li>
<li><code>git clone git://github.com/imathis/octopress.git nyami.github.io</code></li>
<li><code>cd nyami.github.io</code></li>
<li><code>gem install bundler</code></li>
<li><code>bundle install</code></li>
<li><code>rake install</code></li>
<li><code>notepad .\_config.yml</code> and update properties and save</li>
<li><code>echo www.nyami.uk &gt;&gt; source/CNAME</code></li>
<li><code>rake new_post["A Blog Is Born"]</code></li>
<li><code>rake generate</code></li>
<li><code>rake preview</code></li>
<li><code>rake setup_github_pages[https://github.com/Nyami/nyami.github.io.git]</code></li>
</ul>


<p>at this point I got the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Set the codepage to 65001 for Windows machines
</span><span class='line'>** Invoke setup_github_pages (first_time)
</span><span class='line'>** Execute setup_github_pages
</span><span class='line'>rake aborted!
</span><span class='line'>ArgumentError: invalid byte sequence in UTF-8
</span><span class='line'>C:/GitHub/nyami.github.io/Rakefile:393:in `strip'
</span><span class='line'>C:/GitHub/nyami.github.io/Rakefile:393:in `blog_url'
</span><span class='line'>C:/GitHub/nyami.github.io/Rakefile:344:in `block in &lt;top (required)>'</span></code></pre></td></tr></table></div></figure>


<p>using the command <code>chcp 65001</code> at this point didn&rsquo;t help so I had a quick peek at &ldquo;Rakefile&rdquo; not really knowing what it is but the problem looked to be around the CNAME file created above so I changed the encoding to ANSI and tried again and this time it was successful.</p>

<p>Now I&rsquo;m going to try get this up on Github&hellip; lets see what happens&hellip;</p>

<p><strong>Update</strong>
So looks like everything worked using the following workflow:</p>

<ul>
<li><code>git add .</code></li>
<li><code>git commit -m "first commit of Octopress blog"</code></li>
<li><code>rake deploy</code></li>
<li><code>git push origin source</code></li>
</ul>


<p>This was surprisingly easy, hopefully over the next few months I&rsquo;ll get some new posts up&hellip;</p>
]]></content>
  </entry>
  
</feed>
