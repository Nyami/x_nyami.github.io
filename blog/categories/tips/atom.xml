<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tips | Nyami's Blog]]></title>
  <link href="http://www.nyami.uk/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://www.nyami.uk/"/>
  <updated>2018-08-17T09:17:30+00:00</updated>
  <id>http://www.nyami.uk/</id>
  <author>
    <name><![CDATA[Douglas Cameron]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dotnet Sln Add]]></title>
    <link href="http://www.nyami.uk/blog/2018/08/17/dotnet-sln-add/"/>
    <updated>2018-08-17T09:02:03+00:00</updated>
    <id>http://www.nyami.uk/blog/2018/08/17/dotnet-sln-add</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I&rsquo;d created a number dotnet projects and supporting solution using the command line so I had to refer to the <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet">documentation</a> to keep me right. As I had just created a number of projects adding each one to the solution is a little tedious so when I&rsquo;d spotted I could use <a href="https://en.wikipedia.org/wiki/Glob_(programming">globbing patterns</a>) I thought this would save time and a few key presses.</p>

<!--more-->


<p>However, when I ran <code>dotnet sln Foo.sln add **\*.csproj</code> I was presented with the error <code>Could not find project or directory **\*.csproj</code>. It turns out that blobbing is not actually supported by the CLI but actually a shell feature and PowerShell wasn&rsquo;t expanding the glob. Luckly as dotnet is cross platform and I have <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">Windows Subsystem for Linux</a> installed with all the dotnet goodness I could switch to <code>bash</code>, ensure globbing was enabled using <code>shopt -s globstar</code>, and then run <code>dotnet sln Foo.sln add **\*.csproj</code> to add all my new projects, job done&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Ping Middleware]]></title>
    <link href="http://www.nyami.uk/blog/2018/02/09/simple-ping-middleware/"/>
    <updated>2018-02-09T16:18:39+00:00</updated>
    <id>http://www.nyami.uk/blog/2018/02/09/simple-ping-middleware</id>
    <content type="html"><![CDATA[<p>If you find yourself needing to create a simple ping endpoint often used by load balancers as a quick check to see if traffic can be directed to your site, rather than complicating the simple and creating an MVC controller etc consider simple middleware.</p>

<!--more-->


<p>The ASP.NET Core request pipeline consists of a sequence of request delegates, these delegates are configured using <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.AspNetCore.Builder.RunExtensions?view=aspnetcore-2.0">Run</a>, <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.AspNetCore.Builder.MapExtensions?view=aspnetcore-2.0">Map</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.AspNetCore.Builder.UseExtensions?view=aspnetcore-2.0">Use</a>, and for our simple ping endpoint Map is a perfect fit. Map will create a branch in the pipeline allowing you to break out of the normal flow which could have the advantage as it can keep this as lightweight as you need. The following can be used to return a 200 response to indicate our site should be good to go, if you need to add some health checks or additional logic you could create more complex middleware.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app.Map(&ldquo;/ping&rdquo;,
</span><span class='line'>  ping => ping.Run(async conext => await conext.Response.WriteAsync(&ldquo;ok&rdquo;)));</span></code></pre></td></tr></table></div></figure></p>

<p>For more information on Middleware check out <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?tabs=aspnetcore2x#writing-middleware">ASP.NET Core Middleware</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Self-Signed Certificate for Identity Provider]]></title>
    <link href="http://www.nyami.uk/blog/2017/11/18/creating-a-self-signed-certificate-for-identity-provider/"/>
    <updated>2017-11-18T09:54:16+00:00</updated>
    <id>http://www.nyami.uk/blog/2017/11/18/creating-a-self-signed-certificate-for-identity-provider</id>
    <content type="html"><![CDATA[<p>I’d recently had to create a self-signed certificate for use in IdentityProvider4 and was coming up against problems when using the default options with New-SelfSignedCertificate PS module.</p>

<p>Identity Server was throwing &ldquo;CryptographicException: Invalid provider type specified&rdquo; and I had ensured the user account had access so it should have been all good. After a little bit of digging it turned out the private keys were not accessible from .NET. David Christiansen’s <a href="http://blog.davidchristiansen.com/2016/05/521/">blog post</a> helped me track down the issue but with a little more research I ended up with the following PowerShell to create a working certificate avoiding additional steps I didnt understand ;).</p>

<!--more-->


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$idSrvCertificate = New-SelfSignedCertificate &lt;code>
</span><span class='line'>    -Subject "CN=MyIdentityProviderCert"&lt;/code>
</span><span class='line'>    -FriendlyName &ldquo;Identity Server Token Signing&rdquo; &lt;code>
</span><span class='line'>    -CertStoreLocation "cert:LocalMachine\My"&lt;/code>
</span><span class='line'>    -KeyAlgorithm RSA &lt;code>
</span><span class='line'>    -KeySpec Signature&lt;/code>
</span><span class='line'>    -KeyLength 2048 &lt;code>
</span><span class='line'>    -KeyUsage DigitalSignature, KeyEncipherment, DataEncipherment, CertSign&lt;/code>
</span><span class='line'>    -NotBefore (Get-Date) `
</span><span class='line'>    -NotAfter (Get-Date).AddYears(5);&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$username = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$keyname = (((Get-ChildItem cert:\LocalMachine\my | Where-Object {$_.thumbprint -like $idSrvCertificate.ThumbPrint}).PrivateKey).CspKeyContainerInfo).UniqueKeyContainerName;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>$keypath = $env:ProgramData + &ldquo;\Microsoft\Crypto\RSA\MachineKeys\&rdquo;;
</span><span class='line'>$fullpath = $keypath + $keyname;
</span><span class='line'>icacls $fullpath /grant $username`:RX;</span></code></pre></td></tr></table></div></figure></p>

<p> In addition to creating the certificate it will also ensure the current user has read access to the private keys avoiding the need to run VS elevated when developing, this last part could obviously be extracted and reused for your application pool if running Identity Server in IIS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RadButton Single Click]]></title>
    <link href="http://www.nyami.uk/blog/2016/07/13/radbutton-single-click/"/>
    <updated>2016-07-13T20:55:47+00:00</updated>
    <id>http://www.nyami.uk/blog/2016/07/13/radbutton-single-click</id>
    <content type="html"><![CDATA[<p>A great and easy way to avoid the double-bounce issue and prevent getting duplicate entries etc is to use the <a href="http://demos.telerik.com/aspnet-ajax/button/examples/singleclick/defaultcs.aspx">SingleClick</a> property of the RadButton.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;telerik:RadButton runat=&ldquo;server&rdquo; ID=&ldquo;btnSend&rdquo; Text=&ldquo;Send&rdquo; OnClick=&ldquo;btnSend_Click&rdquo; SingleClick=&ldquo;true&rdquo; SingleClickText=&ldquo;Sending&hellip;&rdquo;>
</span><span class='line'>&lt;/telerik:RadButton></span></code></pre></td></tr></table></div></figure></p>

<p>I&rsquo;ve no idea how I&rsquo;ve not encountered this RadButton setting before now, saves wiring up custom OnClientClick events&hellip;</p>
]]></content>
  </entry>
  
</feed>
